# -*- coding: utf-8 -*-
"""my_team.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dnbQgzV0wmZTwi8b4BTl_n6bkelm2QG6
"""

import tensorflow as tf
from tensorflow.keras.applications import MobileNet
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model

from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True

input_shape = (224, 224, 3)

base_model = MobileNet(include_top=False, input_shape=input_shape, weights = "imagenet")

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(5, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=x)

model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.keras.optimizers.Adam(lr=0.001),
              metrics=['accuracy'])

train_datagen = ImageDataGenerator(rescale=1./255,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

train = '/content/drive/MyDrive/Data/train'

val = '/content/drive/MyDrive/Data/val'

# Define the batch size and number of epochs for training
batch_size = 60
epochs = 60

# Create the generators for the training and validation sets
train_generator = train_datagen.flow_from_directory(train,
                                                    target_size=(224,224),
                                                    batch_size=batch_size,
                                                    class_mode="categorical"
                                                    )
validation_generator = test_datagen.flow_from_directory(val,
                                                        target_size=(224,224),
                                                        batch_size=batch_size,
                                                        class_mode="categorical"
                                                        )

model.fit(train_generator,
          epochs=epochs,
          validation_data=validation_generator,steps_per_epoch=30)

model.save("mobilenet.h5")

model =tf.keras.models.load_model("mobilenet.h5",compile=False)

#Convert to tflite
converter = tf.lite.TFLiteConverter.from_keras_model(model)

converter.optimizations = [tf.lite.Optimize.OPTIMIZE_FOR_SIZE] #Uses default optimization strategy to reduce the model size
#converter.target_spec.supported_types = [tf.uint8]
tflite_model = converter.convert()
open("mobile1S.tflite", "wb").write(tflite_model)